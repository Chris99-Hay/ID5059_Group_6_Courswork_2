# Exploratory Data Analysis (Hayden)

# Load Data and Libraries
train <- read.csv("train.csv")
test.data <- read.csv("test.csv")

library(psych)
library(dplyr) # for data manipulation
library(stringr) # for data manipulation
library(caret) # for sampling
library(caTools) # for train/test split
library(ggplot2) # for data visualization
library(corrplot) # for correlations
library(Rtsne) # for tsne plotting
library(caret)
library(ROSE)# for ROSE sampling
library(rpart)# for decision tree model
library(Rborist)# for random forest model
library(xgboost) # for xgboost model
library(imputeTS) # for xgboost model

###
# function to set plot height and width
###
fig <- function(width, heigth){
  options(repr.plot.width = width, repr.plot.height = heigth)
}

# Check for NAs 
colSums(is.na(train)) # no missing data it seems

# Check class imbalance
table(train$Class)
#    0      1 
# 284315    492

# class imbalance in percentage
prop.table(table(df$Class))
#         0           1 
# 0.998272514 0.001727486 

multi.hist(train) # V1-V28 signficantly skewed 

################################################################################
#  Data Visualization
################################################################################
# Visualize the imbalance in a bar chat format
# clearly there is significant imbalance as no fraud is 100% and fraud is 0%
fig(12, 8)
common_theme <- theme(plot.title = element_text(hjust = 0.5, face = "bold"))

ggplot(data = train, aes(x = factor(Class), 
                      y = prop.table(stat(count)), fill = factor(Class),
                      label = scales::percent(prop.table(stat(count))))) +
  geom_bar(position = "dodge") + 
  geom_text(stat = 'count',
            position = position_dodge(.9), 
            vjust = -0.5, 
            size = 3) + 
  scale_x_discrete(labels = c("no fraud", "fraud"))+
  scale_y_continuous(labels = scales::percent)+
  labs(x = 'Class', y = 'Percentage') +
  ggtitle("Distribution of class labels") +
  common_theme

###
# Distribution of Time by class
###
fig(14, 8)
train %>%
  ggplot(aes(x = Time, fill = factor(Class))) + geom_histogram(bins = 100)+
  labs(x = 'Time in seconds since first transaction', y = 'No. of transactions') +
  ggtitle('Distribution of time of transaction by class') +
  facet_grid(Class ~ ., scales = 'free_y') + common_theme

# The ‘Time’ feature looks pretty similar across both types of transactions. 
# One could argue that fraudulent transactions are more uniformly distributed,
# while normal transactions have a cyclical distribution.

###
# Distribution of Transaction amount by Class
###
fig(14, 8)
ggplot(train, aes(x = factor(Class), y = Amount)) + geom_boxplot() + 
  labs(x = 'Class', y = 'Amount') +
  ggtitle("Distribution of transaction amount by class") + common_theme

# More variability in the transaction values for non-fraudulent transactions?
# More outliers

###
# Correlation Plot Matrix (could try covariance matrix as well...)
###
fig(14, 8)
correlations <- cor(train,method="pearson")
corrplot(correlations, number.cex = .9, method = "number", type = "full", tl.cex=0.8,tl.col = "black")
# No variables stand out as signifcantly correlated with Amount or Class
# This may be because before publishing, most of the features were presented 
# to a Principal Component Analysis (PCA) algorithm. 
# The features V1 to V28 are most probably the Principal Components resulted after 
# propagating the real features through PCA.
# We do not know if the numbering of the features reflects the importance of the Principal Components.

###
# Visualization of transactions using t-SNE
###

# Try visualizing the data using t-Distributed Stochastic Neighbour Embedding, 
# a technique to reduce dimensionality.
# To train the model, perplexity was set to 20.
# The visualisation should give us a hint as to whether there exist any 
# “discoverable” patterns in the data which the model could learn.
# If there is no obvious structure in the data, it is more likely that the 
# model will perform poorly.

fig(16, 10)

# Use 10% of data to compute t-SNE
tsne_subset <- 1:as.integer(0.1*nrow(train))
tsne <- Rtsne(train[tsne_subset,-c(1, 31)], perplexity = 20, theta = 0.5, pca = F,
              verbose = F, max_iter = 500, check_duplicates = F)

classes <- as.factor(train$Class[tsne_subset])
tsne_mat <- as.data.frame(tsne$Y)
ggplot(tsne_mat, aes(x = V1, y = V2)) + geom_point(aes(color = classes)) + 
  theme_minimal() + common_theme + ggtitle("t-SNE visualisation of transactions") + 
  scale_color_manual(values = c("#E69F00", "#56B4E9"))
# There appears to be a separation between the two classes as most fraudulent 
# transactions seem to lie near the edge of the blob of data.

################################################################################
#  Data Cleaning/Preparation for Modelling
# Time’ feature has little or no significance in correctly classifying a fraud 
# transaction and hence eliminate this column from further analysis.
################################################################################
#Remove 'Time' variable
train <- train[,-1]
#Change 'Class' variable to factor
train$Class <- as.factor(train$Class)
levels(train$Class) <- c("Not_Fraud", "Fraud")
#Scale numeric variables
train[,-30] <- scale(train[,-30])
head(train)

str(test.data)
#Remove 'Time' variable
test.data <- test.data[,-1]
#Change 'Class' variable to factor
test.data$Class <- as.factor(test.data$Class)
levels(test.data$Class) <- c("Not_Fraud", "Fraud")
#Scale numeric variables
test.data[,-30] <- scale(test.data[,-30])
head(test.data)

################################################################################
# Data Removal and Imputation Simulation (Polina)
################################################################################





################################################################################
# Model Building (Everyone who built models) 
################################################################################
